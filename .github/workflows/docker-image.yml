name: build v8 and release

on: workflow_dispatch

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  build-v8-source-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Export TAG_NAME env
        run: echo TAG_NAME=$(grep 'RUN git checkout' Dockerfile | awk '{print $4}' | sed -e 's/\//-/g') >> $GITHUB_ENV

      - name: Export IMAGE_NAME env
        run: echo IMAGE_NAME=ghcr.io/xiaowj/v8-source-image:${TAG_NAME} >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the Docker image if needed
        run: ./build_v8_source_image.sh

      - name: Start the Docker image
        run: docker run -dit --name v8docker ${IMAGE_NAME} && docker ps

      - name: Copy dist to current path
        run: docker cp v8docker:/home/docker/v8/include ./include

      - name: Upload headers
        uses: actions/upload-artifact@v3
        with:
          name: headers
          path: ./include

  build-v8:
    needs: build-v8-source-image
    strategy:
      matrix:
        docker_file_path: [arm, arm64, x86, x86_64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: List all files
        run: echo TAG_NAME=$(grep 'RUN git checkout' Dockerfile | awk '{print $4}' | sed -e 's/\//-/g') >> $GITHUB_ENV
      - name: build v8 source for ${{ matrix.docker_file_path }}
        run: docker build . --file Dockerfile.${{ matrix.docker_file_path }} -t v8-lib:${{ matrix.docker_file_path }} --build-arg BASE_IMAGE_TAG=${TAG_NAME}
      - name: Start the Docker image
        run: docker run -dit --name v8lib${{ matrix.docker_file_path }} v8-lib:${{ matrix.docker_file_path }}
      - name: Copy dist to current path
        run: docker cp v8lib${{ matrix.docker_file_path }}:/home/docker/v8/target/ ./target
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.docker_file_path }}
          path: ./target

  create-release:
    needs: build-v8
    runs-on: ubuntu-latest
    steps:
      - name: Download v8
        uses: actions/download-artifact@v3
      - name: Archive files
        run: zip -r ./v8.zip ./*
      - name: Puhlish to release
        uses: softprops/action-gh-release@v1
        with:
          files: "./v8.zip"
